{
  "api/AndreyAkaSkif.ServiceResult.Abstractions.Result-1.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Abstractions.Result-1.html",
    "title": "Class Result<T> | DddAbstractions",
    "keywords": "Class Result<T> Namespace AndreyAkaSkif.ServiceResult.Abstractions Assembly AndreyAkaSkif.ServiceResult.dll Базовый класс результата public abstract class Result<T> Type Parameters T Тип возвращаемого объекта Inheritance object Result<T> Derived ConflictResult<T> CreatedResult<T> InvalidResult<T> NoContentResult<T> NotFoundResult<T> SuccessResult<T> UpdatedResult<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data public virtual T? Data { get; } Property Value T Error public virtual string Error { get; } Property Value string IsFailure public bool IsFailure { get; } Property Value bool IsOk public virtual bool IsOk { get; } Property Value bool"
  },
  "api/AndreyAkaSkif.ServiceResult.Abstractions.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Abstractions.html",
    "title": "Namespace AndreyAkaSkif.ServiceResult.Abstractions | DddAbstractions",
    "keywords": "Namespace AndreyAkaSkif.ServiceResult.Abstractions Classes Result<T> Базовый класс результата"
  },
  "api/AndreyAkaSkif.ServiceResult.Implementations.ConflictResult-1.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Implementations.ConflictResult-1.html",
    "title": "Class ConflictResult<T> | DddAbstractions",
    "keywords": "Class ConflictResult<T> Namespace AndreyAkaSkif.ServiceResult.Implementations Assembly AndreyAkaSkif.ServiceResult.dll Конфликт при создании сущности public sealed class ConflictResult<T> : Result<T> Type Parameters T Тип возвращаемого объекта Inheritance object Result<T> ConflictResult<T> Inherited Members Result<T>.IsOk Result<T>.IsFailure Result<T>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks По назначению соответствует HTTP status code 409 Constructors ConflictResult() public ConflictResult() ConflictResult(string) public ConflictResult(string error) Parameters error string Properties Error public override string Error { get; } Property Value string"
  },
  "api/AndreyAkaSkif.ServiceResult.Implementations.CreatedResult-1.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Implementations.CreatedResult-1.html",
    "title": "Class CreatedResult<T> | DddAbstractions",
    "keywords": "Class CreatedResult<T> Namespace AndreyAkaSkif.ServiceResult.Implementations Assembly AndreyAkaSkif.ServiceResult.dll Сущность создана public sealed class CreatedResult<T> : Result<T> Type Parameters T Тип возвращаемого объекта Inheritance object Result<T> CreatedResult<T> Inherited Members Result<T>.IsFailure Result<T>.Error object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks По назначению соответствует HTTP status code 201 Constructors CreatedResult(T) public CreatedResult(T data) Parameters data T Properties Data public override T Data { get; } Property Value T IsOk public override bool IsOk { get; } Property Value bool"
  },
  "api/AndreyAkaSkif.ServiceResult.Implementations.InvalidResult-1.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Implementations.InvalidResult-1.html",
    "title": "Class InvalidResult<T> | DddAbstractions",
    "keywords": "Class InvalidResult<T> Namespace AndreyAkaSkif.ServiceResult.Implementations Assembly AndreyAkaSkif.ServiceResult.dll Не удалось выполнить public sealed class InvalidResult<T> : Result<T> Type Parameters T Тип возвращаемого объекта Inheritance object Result<T> InvalidResult<T> Inherited Members Result<T>.IsOk Result<T>.IsFailure Result<T>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors InvalidResult() public InvalidResult() InvalidResult(string) public InvalidResult(string error) Parameters error string Properties Error public override string Error { get; } Property Value string"
  },
  "api/AndreyAkaSkif.ServiceResult.Implementations.NoContentResult-1.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Implementations.NoContentResult-1.html",
    "title": "Class NoContentResult<T> | DddAbstractions",
    "keywords": "Class NoContentResult<T> Namespace AndreyAkaSkif.ServiceResult.Implementations Assembly AndreyAkaSkif.ServiceResult.dll Сущность удалена public sealed class NoContentResult<T> : Result<T> Type Parameters T Тип возвращаемого объекта Inheritance object Result<T> NoContentResult<T> Inherited Members Result<T>.IsFailure Result<T>.Error Result<T>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks По назначению соответствует HTTP status code 204 Properties IsOk public override bool IsOk { get; } Property Value bool"
  },
  "api/AndreyAkaSkif.ServiceResult.Implementations.NotFoundResult-1.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Implementations.NotFoundResult-1.html",
    "title": "Class NotFoundResult<T> | DddAbstractions",
    "keywords": "Class NotFoundResult<T> Namespace AndreyAkaSkif.ServiceResult.Implementations Assembly AndreyAkaSkif.ServiceResult.dll Сущность не найденв public sealed class NotFoundResult<T> : Result<T> Type Parameters T Тип возвращаемого объекта Inheritance object Result<T> NotFoundResult<T> Inherited Members Result<T>.IsOk Result<T>.IsFailure Result<T>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks По назначению соответствует HTTP status code 404 Constructors NotFoundResult() public NotFoundResult() NotFoundResult(string) public NotFoundResult(string error) Parameters error string Properties Error public override string Error { get; } Property Value string"
  },
  "api/AndreyAkaSkif.ServiceResult.Implementations.SuccessResult-1.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Implementations.SuccessResult-1.html",
    "title": "Class SuccessResult<T> | DddAbstractions",
    "keywords": "Class SuccessResult<T> Namespace AndreyAkaSkif.ServiceResult.Implementations Assembly AndreyAkaSkif.ServiceResult.dll Выполнено public sealed class SuccessResult<T> : Result<T> Type Parameters T Тип возвращаемого объекта Inheritance object Result<T> SuccessResult<T> Inherited Members Result<T>.IsFailure Result<T>.Error object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks По назначению соответствует HTTP status code 200 Constructors SuccessResult(T) public SuccessResult(T data) Parameters data T Properties Data public override T Data { get; } Property Value T IsOk public override bool IsOk { get; } Property Value bool"
  },
  "api/AndreyAkaSkif.ServiceResult.Implementations.UpdatedResult-1.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Implementations.UpdatedResult-1.html",
    "title": "Class UpdatedResult<T> | DddAbstractions",
    "keywords": "Class UpdatedResult<T> Namespace AndreyAkaSkif.ServiceResult.Implementations Assembly AndreyAkaSkif.ServiceResult.dll Сущность обновлена public sealed class UpdatedResult<T> : Result<T> Type Parameters T Тип возвращаемого объекта Inheritance object Result<T> UpdatedResult<T> Inherited Members Result<T>.IsFailure Result<T>.Error object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks По назначению соответствует HTTP status code 200 Constructors UpdatedResult(T) public UpdatedResult(T data) Parameters data T Properties Data public override T Data { get; } Property Value T IsOk public override bool IsOk { get; } Property Value bool"
  },
  "api/AndreyAkaSkif.ServiceResult.Implementations.html": {
    "href": "api/AndreyAkaSkif.ServiceResult.Implementations.html",
    "title": "Namespace AndreyAkaSkif.ServiceResult.Implementations | DddAbstractions",
    "keywords": "Namespace AndreyAkaSkif.ServiceResult.Implementations Classes ConflictResult<T> Конфликт при создании сущности CreatedResult<T> Сущность создана InvalidResult<T> Не удалось выполнить NoContentResult<T> Сущность удалена NotFoundResult<T> Сущность не найденв SuccessResult<T> Выполнено UpdatedResult<T> Сущность обновлена"
  },
  "docs/Nuget/create-package.html": {
    "href": "docs/Nuget/create-package.html",
    "title": "Создание Nuget-пакетов | DddAbstractions",
    "keywords": "Создание Nuget-пакетов Проект Файл проекта Добавить в csproj: <PropertyGroup> <RepositoryUrl>https://github.com/andrey-aka-skif/[ApplicationName]</RepositoryUrl> <GeneratePackageOnBuild>True</GeneratePackageOnBuild> </PropertyGroup> В строке <RepositoryUrl>https://github.com/andrey-aka-skif/[ApplicationName]</RepositoryUrl>: andrey-aka-skif - имя аккаунта [ApplicationName] - имя пакета NuGet.Config Создать файл NuGet.Config в корне проекта: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <clear /> <add key=\"github\" value=\"https://nuget.pkg.github.com/andrey-aka-skif/index.json\" /> </packageSources> <packageSourceCredentials> <github> <add key=\"Username\" value=\"andrey-aka-skif\" /> <add key=\"ClearTextPassword\" value=\"%github_access_token%\" /> </github> </packageSourceCredentials> </configuration> Здесь: andrey-aka-skif - имя аккаунта %github_access_token% - персональный токен GitHub, который взят из переменной окружения %github_access_token%. Указанную переменную нужно добавить к переменным окружения."
  },
  "docs/Nuget/links.html": {
    "href": "docs/Nuget/links.html",
    "title": "Ссылки | DddAbstractions",
    "keywords": "Ссылки Инструкция по созданию NuGet пакета взята из статьи: Using Github as Private Nuget Package Server and Share Your Packages Исправление некоторых проблем с авторизацией при загрузке пакетов: Private nuget source github returns 401 with correct credentials"
  },
  "docs/Nuget/publish-package.html": {
    "href": "docs/Nuget/publish-package.html",
    "title": "Публикация Nuget-пакетов | DddAbstractions",
    "keywords": "Публикация Nuget-пакетов Собрать решение и выполнить команду: dotnet nuget push \"bin/Release/<ApplicationName>.1.0.0.nupkg\" --source \"github\" Здесь 1.0.0 - версия, указанная в настройках проекта"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Введение | DddAbstractions",
    "keywords": "Введение Реализация Result-паттерна Идея функционального подхода при возврате значений как объекта Result взята из статьи Владимира Хорикова Functional C#: Handling failures, input errors. Идея создать отдельный проект взята из его учебного проекта на github. Реализация Result в основном основана на статье Clean Up Your Client to Business Logic Relationship With a Result Pattern (C#) Пример // BlocksService.cs public async Task<Result<Block>> GetByIdAsync(int id) { var stationResult = await _stationService.GetDefaultAsync(); if (stationResult.IsFailure) return new BadRequestResult<Block>(STATION_NOT_FOUND_MESSAGE); var block = await _context.Blocks.Where(s => !s.IsDeleted) .Where(s => s.Id == id) .Where(s => s.Station.Equals(stationResult.Data)) .FirstOrDefaultAsync(); if (block is null) return new NotFoundResult<Block>($\"Не найден Блок (id = {id})\"); return new SuccessResult<Block>(block); } // BlocksController.cs public async Task<ActionResult<Block>> GetByIdAsync(int id) { var result = await _service.GetByIdAsync(id); if (result.IsOk) return Ok(result.Data); return NoFound(); }"
  },
  "index.html": {
    "href": "index.html",
    "title": "ServiceResult | DddAbstractions",
    "keywords": "ServiceResult Реализация Result-паттерна Идея функционального подхода при возврате значений как объекта Result взята из статьи Владимира Хорикова Functional C#: Handling failures, input errors. Идея создать отдельный проект взята из его учебного проекта на github. Реализация Result в основном основана на статье Clean Up Your Client to Business Logic Relationship With a Result Pattern (C#)"
  }
}